% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_beast2.R
\name{run_beast2}
\alias{run_beast2}
\title{Run BEAST2}
\usage{
run_beast2(
  input_filename,
  output_log_filename = "output_log_filename_is_deprecated",
  output_trees_filenames = "output_trees_filenames_is_deprecated",
  output_state_filename = create_temp_state_filename(),
  rng_seed = NA,
  n_threads = NA,
  use_beagle = FALSE,
  overwrite = TRUE,
  beast2_working_dir = "beast2_working_dir_is_deprecated",
  beast2_path = get_default_beast2_path(),
  verbose = FALSE
)
}
\arguments{
\item{input_filename}{the name of a BEAST2 input XML file.
This file usually has an \code{.xml} extension.
Use \link{create_temp_input_filename} to create a temporary
filename with that extension.}

\item{output_log_filename}{name of the .log file to create}

\item{output_trees_filenames}{one or more names for .trees file to create.
There will be one .trees file created per alignment in the input
file. The number of alignments must equal the number of .trees
filenames, else an error is thrown. Alignments are sorted alphabetically
by their IDs}

\item{output_state_filename}{name of the \code{.xml.state} file to create.
Use \link{create_temp_state_filename} to create a temporary
filename with that extension.}

\item{rng_seed}{the random number generator seed of the BEAST2 run.
Must be a non-zero positive integer value or \link{NA}.
If \code{rng_seed} is \link{NA}, BEAST2 will pick a random seed}

\item{n_threads}{the number of computational threads to use.
Use \link{NA} to use the BEAST2 default of 1.}

\item{use_beagle}{use BEAGLE if present}

\item{overwrite}{if TRUE: overwrite the \code{.log}
and \code{.trees} files if one of these exists.
If FALSE, BEAST2 will not be started if
\itemize{
  \item{the \code{.log} file exists}
  \item{the \code{.trees} files exist}
  \item{the \code{.log} file created by BEAST2 exists}
  \item{the \code{.trees} files created by BEAST2 exist}
}}

\item{beast2_working_dir}{a folder where BEAST2 can work in
isolation.
For each BEAST2 run, a new subfolder is created in that folder.
Within this folder, BEAST2 is allowed to create all of its output files,
without the risk of overwriting existing ones, allowing
BEAST2 to run in multiple parallel processes.}

\item{beast2_path}{name of either a BEAST2 binary file
(usually simply \code{beast})
or a BEAST2 jar file
(usually has a \code{.jar} extension).
Use \link{get_default_beast2_bin_path} to get
the default BEAST binary file's path
Use \link{get_default_beast2_jar_path} to get
the default BEAST jar file's path}

\item{verbose}{if TRUE, additional information is displayed, that
is potentially useful in debugging}
}
\value{
The text sent to \code{STDOUT} and \code{STDERR}.
  It will create the file with name \code{output_state_filenames}
}
\description{
Run BEAST2
}
\examples{
check_empty_beaustier_folders()

if (is_beast2_installed() && is_on_ci()) {

  output_state_filename <- create_temp_state_filename()

  run_beast2(
    input_filename = get_beastier_path("2_4.xml"),
    output_state_filename = output_state_filename

  )
  file.remove(output_state_filename)
  remove_beaustier_folders()
}

check_empty_beaustier_folders()
}
\author{
RichÃ¨l J.C. Bilderbeek
}
